#!/bin/bash
# Project Drishti - Final Setup Verification Script

echo "üîç PROJECT DRISHTI - FINAL VERIFICATION"
echo "======================================="

cd backend

echo "1Ô∏è‚É£ Checking Python dependencies..."
python -c "
import sys
print(f'Python version: {sys.version}')

required_packages = [
    'fastapi', 'uvicorn', 'google.cloud.firestore', 'google.cloud.vision',
    'google.cloud.aiplatform', 'firebase_admin', 'googlemaps', 'geopy',
    'numpy', 'opencv-python', 'Pillow', 'pandas', 'scikit-learn'
]

missing = []
for pkg in required_packages:
    try:
        __import__(pkg.replace('-', '_').replace('.', '_'))
        print(f'‚úÖ {pkg}')
    except ImportError:
        missing.append(pkg)
        print(f'‚ùå {pkg} - MISSING')

if missing:
    print(f'\\nüö® Missing packages: {missing}')
    print('Run: pip install -r requirements.txt')
else:
    print('\\n‚úÖ All required packages are installed!')
"

echo ""
echo "2Ô∏è‚É£ Checking environment variables..."
python -c "
import os
from dotenv import load_dotenv
load_dotenv()

required_vars = ['GCP_PROJECT_ID', 'FIREBASE_STORAGE_BUCKET']
missing = []

for var in required_vars:
    value = os.getenv(var)
    if value:
        print(f'‚úÖ {var} = {value}')
    else:
        missing.append(var)
        print(f'‚ùå {var} - NOT SET')

if missing:
    print(f'\\nüö® Missing environment variables: {missing}')
    print('Update your .env file!')
else:
    print('\\n‚úÖ All required environment variables are set!')
"

echo ""
echo "3Ô∏è‚É£ Testing service imports..."
python -c "
import logging
logging.basicConfig(level=logging.WARNING)  # Suppress info logs

try:
    from services.firebase_service import FirebaseService
    print('‚úÖ FirebaseService import')
except Exception as e:
    print(f'‚ùå FirebaseService import failed: {e}')

try:
    from services.vision_analysis import VisionAnalysisService
    print('‚úÖ VisionAnalysisService import')
except Exception as e:
    print(f'‚ùå VisionAnalysisService import failed: {e}')

try:
    from services.gemini_agent import VertexAIGeminiAgentService
    print('‚úÖ VertexAIGeminiAgentService import')
except Exception as e:
    print(f'‚ùå VertexAIGeminiAgentService import failed: {e}')

try:
    from services.forecasting_model import ForecastingService
    print('‚úÖ ForecastingService import')
except Exception as e:
    print(f'‚ùå ForecastingService import failed: {e}')

try:
    from services.google_maps_service import GoogleMapsService
    print('‚úÖ GoogleMapsService import')
except Exception as e:
    print(f'‚ùå GoogleMapsService import failed: {e}')

try:
    from utils.data_models import Location, ManualCommand, VideoAnalysisResult
    print('‚úÖ Data models import')
except Exception as e:
    print(f'‚ùå Data models import failed: {e}')

try:
    from api.v1.routes import router
    print('‚úÖ API routes import')
except Exception as e:
    print(f'‚ùå API routes import failed: {e}')

print('\\n‚úÖ Service import test completed!')
"

echo ""
echo "4Ô∏è‚É£ Testing data model fixes..."
python -c "
from utils.data_models import Location, ManualCommand

# Test Location with optional coordinates
loc1 = Location(name='Test Location')
print(f'‚úÖ Location with name only: {loc1.name}')

loc2 = Location(name='Test Location', latitude=34.0, longitude=-118.0)
print(f'‚úÖ Location with coordinates: {loc2.name} ({loc2.latitude}, {loc2.longitude})')

# Test ManualCommand without incident_id
cmd = ManualCommand(action='dispatch', notes='Test command')
print(f'‚úÖ ManualCommand without incident_id: {cmd.action}')

print('\\n‚úÖ Data model validation passed!')
"

echo ""
echo "üéØ VERIFICATION COMPLETE!"
echo ""
echo "If all tests show ‚úÖ, your project is ready for demo!"
echo ""
echo "Next steps:"
echo "1. Start the backend: python main.py"
echo "2. Run edge simulation: cd ../simulated_edge && python edge_test.py"
echo "3. Test API endpoints with your frontend"
echo ""
echo "Good luck with your hackathon! üöÄ"
