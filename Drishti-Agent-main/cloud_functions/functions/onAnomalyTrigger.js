// cloud_functions/functions/onAnomalyTrigger.js

const functions = require('firebase-functions');
const admin = require('firebase-admin');
const { PubSub } = require('@google-cloud/pubsub');

// Initialize Firebase Admin SDK (will be initialized by index.js if exported)
// If running standalone for testing, uncomment: admin.initializeApp();

const db = admin.firestore();
const pubsub = new PubSub();

const ANOMALY_TRIGGER_TOPIC = 'anomaly-triggers'; // Pub/Sub topic for deeper analysis

/**
 * HTTP Cloud Function to receive anomaly data from the simulated edge processor.
 *
 * This function performs the following actions:
 * 1. Validates the incoming request body.
 * 2. Stores the raw anomaly data in a Firestore collection ('incidents').
 * 3. Publishes a message to a Pub/Sub topic ('anomaly-triggers')
 * to initiate further, deeper analysis in the cloud.
 *
 * @param {object} req The Express request object.
 * @param {object} res The Express response object.
 */
exports.onAnomalyTrigger = functions
    .runWith({
        timeoutSeconds: 60,
        memory: '256MB'
    })
    .https.onRequest(async (req, res) => {
    // Enable CORS for web clients
    res.set('Access-Control-Allow-Origin', '*');
    res.set('Access-Control-Allow-Methods', 'POST');
    res.set('Access-Control-Allow-Headers', 'Content-Type');
    
    if (req.method === 'OPTIONS') {
        res.status(204).send('');
        return;
    }

    // Ensure it's a POST request
    if (req.method !== 'POST') {
        return res.status(405).send('Method Not Allowed');
    }

    // Ensure content type is application/json
    if (req.headers['content-type'] !== 'application/json') {
        return res.status(400).send('Bad Request: Content-Type must be application/json');
    }

    const anomalyData = req.body;

    // Basic validation of incoming data
    if (!anomalyData || !anomalyData.anomalyType || !anomalyData.videoUrl || !anomalyData.deviceId || !anomalyData.location) {
        console.error('Missing required anomaly data fields:', anomalyData);
        return res.status(400).send('Bad Request: Missing required anomaly data (anomalyType, videoUrl, deviceId, location).');
    }

    try {
        // 1. Store anomaly data in Firestore
        const docRef = await db.collection('incidents').add({
            ...anomalyData,
            status: 'new', // Initial status
            receivedAt: admin.firestore.FieldValue.serverTimestamp() // Server timestamp
        });
        console.log(`Anomaly data stored in Firestore with ID: ${docRef.id}`);

        // 2. Publish a message to Pub/Sub for deeper analysis
        // The Pub/Sub message will contain the incidentId generated by Firestore
        const pubSubPayload = {
            incidentId: docRef.id,
            anomalyType: anomalyData.anomalyType,
            videoUrl: anomalyData.videoUrl,
            deviceId: anomalyData.deviceId,
            location: anomalyData.location,
            timestamp: anomalyData.timestamp, // Original timestamp from edge
            confidence: anomalyData.confidence || 0 // Default confidence if not provided
        };

        const messageId = await pubsub
            .topic(ANOMALY_TRIGGER_TOPIC)
            .publishMessage({ json: pubSubPayload });
        console.log(`Message ${messageId} published to topic ${ANOMALY_TRIGGER_TOPIC} for incident ${docRef.id}`);

        res.status(200).json({
            message: 'Anomaly received and processed successfully!',
            incidentId: docRef.id,
            pubSubMessageId: messageId
        });

    } catch (error) {
        console.error('Error processing anomaly trigger:', error);
        res.status(500).send(`Internal Server Error: ${error.message}`);
    }
});